#!/usr/bin/env python
import os
import sys
import subprocess

env = SConscript("godot-cpp/SConstruct")

# env.Replace(
#     CXX = 'clang++',
#     CXXFLAGS = '-std=c++17 -stdlib=libc++',
#     LINKFLAGS = '-stdlib=libc++',
#     AR = 'llvm-ar'
#     )

# For reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# get current version of python headers
tag = "v3.12.0"

env.VariantDir('build_files', 'src', duplicate=0)


print(env.subst("using $CXX $CXXVERSION"))
env.Append(CPPDEFINES=["CV_VERSION_MAJOR=4"])

print(env["platform"])

if env["platform"] == "windows":
    env.Replace(CXXFLAGS = "/std:c++latest")
    env.Append(CPPPATH=["build_files/", "opencv_built/include/"])
    # env.Append(LIBPATH=["./opencv_built/x64/mingw/staticlib/"])
    # env.Append(LIBS=[
    #     "libade.a",
    #     "libIlmImf.a",
    #     "liblibjpeg-turbo.a",
    #     "liblibopenjp2.a",
    #     "liblibpng.a",
    #     "liblibprotobuf.a",
    #     "liblibtiff.a",
    #     "liblibwebp.a",
    #     "libopencv_calib3d490.a",
    #     "libopencv_core490.a",
    #     "libopencv_dnn490.a",
    #     "libopencv_features2d490.a",
    #     "libopencv_flann490.a",
    #     "libopencv_gapi490.a",
    #     "libopencv_highgui490.a",
    #     "libopencv_imgcodecs490.a",
    #     "libopencv_imgproc490.a",
    #     "libopencv_ml490.a",
    #     "libopencv_objdetect490.a",
    #     "libopencv_photo490.a",
    #     "libopencv_stitching490.a",
    #     "libopencv_video490.a",
    #     "libopencv_videoio490.a",
    #     "libzlib.a"
    #     ])
    # env.Append(LIBS=[
    #     "gdi32",
    #     "comdlg32"
    #     ])
    env.Append(LIBPATH=["./opencv_built/x64/vc17/staticlib/"])
    env.Append(LIBPATH=["./build_files/"])
    # env.Append(LIBS=[
        # "User32.lib",
        # "Advapi32.lib",

        # "ade.lib",
        # "IlmImf.lib",
        # "ippicvmt.lib",
        # "ippiw.lib",
        # "ittnotify.lib",
        # "libjpeg-turbo.lib",
        # "libopenjp2.lib",
        # "libpng.lib",
        # "libprotobuf.lib",
        # "libtiff.lib",
        # "libwebp.lib",
        # "opencv_calib3d4100.lib",
        # "opencv_core4100.lib",
        # "opencv_dnn4100.lib",
        # "opencv_features2d4100.lib",
        # "opencv_flann4100.lib",
        # "opencv_gapi4100.lib",
        # "opencv_highgui4100.lib",
        # "opencv_imgcodecs4100.lib",
        # "opencv_imgproc4100.lib",
        # "opencv_ml4100.lib",
        # "opencv_objdetect4100.lib",
        # "opencv_photo4100.lib",
        # "opencv_stitching4100.lib",
        # "opencv_video4100.lib",
        # "opencv_videoio4100.lib",
        # "zlib.lib"
        # ])
    # env.Append(LIBS=[
    #     "gdi32",
    #     "comdlg32"
    #     ])


elif env["platform"] == "android":
    env.Replace(CXXFLAGS = "-std=c++2b")

    env.Append(CCFLAGS=["-fexceptions"])
    env.Append(ANDROID_HOME="")
    env.Append(CPPPATH=["build_files/", "opencv_built_android/sdk/native/jni/include"])
    # env.Append(LIBPATH=["./opencv_built_android/sdk/native/staticlibs/arm64-v8a/"])
    # # env.Replace(android_api_level="24")
    # env.Append(LIBS=[
    #     # "libopencv_calib3d.a",
    #     # "libopencv_core.a",
    #     # "libopencv_dnn.a",
    #     # "libopencv_features2d.a",
    #     # "libopencv_flann.a",
    #     # "libopencv_gapi.a",
    #     # "libopencv_highgui.a",
    #     # "libopencv_imgcodecs.a",
    #     # "libopencv_imgproc.a",
    #     # "libopencv_ml.a",
    #     # "libopencv_objdetect.a",
    #     # "libopencv_photo.a",
    #     # "libopencv_stitching.a",
    #     # "libopencv_video.a",
    #     # "libopencv_videoio.a",
    #     ])
    # env.Append(LIBPATH=["./opencv_built_android/sdk/native/3rdparty/libs/arm64-v8a"])
    # env.Append(LIBS=[
    #     "libade.a",
    #     "libcpufeatures.a",
    #     "libIlmImf.a",
    #     "libittnotify.a",
    #     "liblibjpeg-turbo.a",
    #     "liblibopenjp2.a",
    #     "liblibpng.a",
    #     "liblibprotobuf.a",
    #     "liblibtiff.a",
    #     "liblibwebp.a",
    #     "libtegra_hal.a",
    #     ])
    # env.Append(LIBPATH=["./opencv_built_android/sdk/native/3rdparty/libs/arm64-v8a"])
    # env.Append(LIBS=[
    #     "android",
    #     "log",
    #     "libz",
    #     "libmediandk",
    #     "libjnigraphics",
    #     "libcamera2ndk"
    # ])


sources = [Glob("build_files/*.cpp"), Glob("build_files/oraculum/*.cpp"), Glob("build_files/miscObjects/*.cpp")]

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "godot_scannur/bin/scannur.{}.{}.framework/scannur.{}.{}".format(
            env["platform"], env["target"], env["platform"], env["target"]
        ),
        source=sources,
    )
else:
    library = env.SharedLibrary(
        "godot_scannur/bin/scannur{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

Default(library)

# Command("file.out", "file.in", Copy("$TARGET", "$SOURCE"))